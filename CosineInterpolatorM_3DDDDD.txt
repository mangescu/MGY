


import java.awt.AWTException;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Robot;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import java.awt.image.BufferedImage;
import java.awt.image.DataBufferByte;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.JFrame;
import javax.swing.JPanel;


public class CosineInterpolatorM_3D {


    JFrame frame;
    JPanel panel;
    MouseListener mouseListener;
    MouseMotionListener mouseMotion;
    KeyListener keylist;
    BufferedImage image_1, image_2;

    Point O = new Point(100, 215, 0);

    boolean enableRender = false;
    int deltaX, deltaY;


    boolean enable_Frame_Grab = false;
    boolean enable_video_encoding = true;
    boolean save_warp_image = true;
    CInterpolator interpolator = new CInterpolator();

    public static void main(String[] args) throws IOException, AWTException {
    	CosineInterpolatorM_3D cosine = new CosineInterpolatorM_3D();
        cosine.interfata();
    }

    public void interfata() throws IOException, AWTException {


        image_1 = new BufferedImage(1000, 1000, BufferedImage.TYPE_3BYTE_BGR);
        image_2 = new BufferedImage(1000, 1000, BufferedImage.TYPE_3BYTE_BGR); 
        interpolator.image_1 = image_1;
        interpolator.image_2 = image_2;
        interpolator.width = image_1.getWidth();
        interpolator.height = image_1.getHeight();
        interpolator.pixelUtil_image_1 = new PixelUtil(image_1);
        interpolator.pixelUtil_image_2 = new PixelUtil(image_2);

        frame = new JFrame();
        interpolator.frame = frame;
        panel = new JPanel() {
            public void paint(Graphics g) {
                g.fillRect(0, 0, 1500, 1500);
                g.drawImage(image_1, 0, 0, null);
             //   if (enableRender && interpolator != null) {
                    drawing(g);
             //   }
            }
        };
        keylist = new KeyListener() {
            public void keyTyped(KeyEvent e) {
            }

            public void keyReleased(KeyEvent e) {
            }

            public void keyPressed(KeyEvent e) {                
                if (e.getKeyCode() == KeyEvent.VK_ESCAPE) {
                    System.exit(0);
                }

                if (e.getKeyCode() == KeyEvent.VK_K) {
                    if (interpolator.grid_cell_number > 3) {
                        interpolator.grid_cell_number--;
                    }
                    panel.repaint();
                }
                
//_________________________________________________________________________________________________________________________________________________________________//               
                if (e.getKeyCode() == KeyEvent.VK_S) {
                     if (!interpolator.splineAndAnchors) {
                        interpolator.grid_start_y += 4;
                     }else {
                         //   O.y += 1;
                     }
                    panel.repaint();
                }
                if (e.getKeyCode() == KeyEvent.VK_W) {
                     if (!interpolator.splineAndAnchors) {
                         interpolator.grid_start_y -= 4;
                     } else {
                       //     O.y -= 1;
                     }
                    panel.repaint();
                }
//_____________________________________________________________________________________________________________________________________________________________________//                
                
                if (e.getKeyCode() == KeyEvent.VK_D) {
                     if (!interpolator.splineAndAnchors) {
                         interpolator.grid_start_x += 4;
                     }
                    panel.repaint();
                }
                if (e.getKeyCode() == KeyEvent.VK_A) {
                     if (!interpolator.splineAndAnchors) {
                             interpolator.grid_start_x -= 4;
                     }
                    panel.repaint();
                }
                
                
                
                
                if (e.getKeyCode() == KeyEvent.VK_L) {
                     if (!interpolator.splineAndAnchors) {
                    interpolator.grid_cell_number++;
                     }
                    panel.repaint();
                }

                if (e.getKeyCode() == KeyEvent.VK_UP) {
                    interpolator.grid_cell_width_y -= 2;
                    panel.repaint();
                }
                if (e.getKeyCode() == KeyEvent.VK_DOWN) {
                    interpolator.grid_cell_width_y += 2;
                    panel.repaint();
                }
                if (e.getKeyCode() == KeyEvent.VK_LEFT) {
                    interpolator.grid_cell_width_x -= 2;
                    panel.repaint();
                }
                if (e.getKeyCode() == KeyEvent.VK_RIGHT) {
                    interpolator.grid_cell_width_x += 2;
                    panel.repaint();
                }
                if (e.getKeyCode() == KeyEvent.VK_ENTER) {
                    interpolator.generateAnchorANDSplines();
                        for (Spline spline : interpolator.splineListH) {
                            spline.getCardinalPoints();
                        }
                        for (Spline spline : interpolator.splineListV) {
                            spline.getCardinalPoints();
                        }
                    panel.repaint(); 
                }

            }
        };
        mouseMotion = new MouseMotionListener() {
            public void mouseMoved(MouseEvent e) {}
            public void mouseDragged(MouseEvent e) {}
        };
        mouseListener = new MouseListener() {
            public void mouseEntered(MouseEvent e) {}
            public void mouseExited(MouseEvent e) {}
            public void mouseClicked(MouseEvent e) {}

            public void mousePressed(MouseEvent e) {}
            public void mouseReleased(MouseEvent e) {}
        };
        panel.addMouseListener(mouseListener);
        panel.addMouseMotionListener(mouseMotion);
        frame.addKeyListener(keylist);
        frame.getContentPane().add(panel);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setSize(1040, 800);
        frame.setLocation(50, 20);
        frame.setVisible(true);

        panel.repaint();
    }

    public void drawing(Graphics g) {
        
        if (interpolator.splineAndAnchors) {
            
            for(int i=0 ; i<interpolator.grid_cell_number-1 ; i++){
                for(int j=0 ; j<interpolator.grid_cell_number-1 ; j++)
                {
                    for(int p=(int) interpolator.cellMatrix[i][j].A.x ; p < (interpolator.cellMatrix[i][j].A.x + interpolator.grid_cell_width_x) ; p++) {
                        for(int k=(int) interpolator.cellMatrix[i][j].A.y ; k < (interpolator.cellMatrix[i][j].A.y + interpolator.grid_cell_width_y) ; k++) {
                            O.x = p;
                            O.y = k;
                            double z = interpolator.getXY_Z_coordonate(interpolator.cellMatrix[i][j], O); 
                            image_1.setRGB((int)O.x,(int)O.y,(int) (0x0+z));
                        }
                    }
                   
                }                
            }
            
            
            
            
            
            g.setColor(Color.red);
            for (Spline spline : interpolator.splineListH) {
                for (int i = interpolator.grid_start_x; i < interpolator.grid_start_x + (interpolator.grid_cell_width_x * (interpolator.grid_cell_number - 1)); i++) {
                    double y = spline.getYSplineCoord(i);
                    g.fillRect(i, (int) y, 1, 1);
                }

            }
            for (Spline spline : interpolator.splineListV) {
                for (int i = interpolator.grid_start_y; i < interpolator.grid_start_y + (interpolator.grid_cell_width_y * (interpolator.grid_cell_number - 1)); i++) {
                    double x = spline.getXSplineCoord(i);
                    g.fillRect((int) x, i, 1, 1);
                }
            }
        
            if (interpolator.pointMatrix != null) {
                for (int i = 0; i < interpolator.grid_cell_number; i++) {
                    for (int j = 0; j < interpolator.grid_cell_number; j++) {
                        if(interpolator.pointMatrix[i][j].z == 255){
                              g.setColor(Color.MAGENTA);
                        } else {
                              g.setColor(Color.blue);
                        }
                        g.fillRect((int) interpolator.pointMatrix[i][j].x - 1, (int) interpolator.pointMatrix[i][j].y - 1, 2, 2);

                    }
                }
            }

        } else {
            g.setColor(Color.green);
            for (int i = interpolator.grid_start_x; i < interpolator.grid_start_x + (interpolator.grid_cell_width_x * (interpolator.grid_cell_number)); i = i + interpolator.grid_cell_width_x) {
                g.drawLine(i, interpolator.grid_start_y, i, interpolator.grid_start_y + ((interpolator.grid_cell_number - 1) * interpolator.grid_cell_width_y));
            }
            for (int i = interpolator.grid_start_y; i < interpolator.grid_start_y + (interpolator.grid_cell_width_y * (interpolator.grid_cell_number)); i = i + interpolator.grid_cell_width_y) {
                g.drawLine(interpolator.grid_start_x, i, interpolator.grid_start_x + ((interpolator.grid_cell_number - 1) * interpolator.grid_cell_width_x), i);
            }

        }

    }
}

class CInterpolator {
	
    int grid_cell_number = 10;
    int grid_start_x = 10;
    int grid_start_y = 10;
    int grid_cell_width_x = 70;
    int grid_cell_width_y = 70;
    int gridPixelPercent_x;
    int gridPixelPercent_y;	
	
    JFrame frame;
    String imageName;
    boolean splineAndAnchors = false;
    Point top = new Point(0, 0, 0);
    Point botom = new Point(0, 0, 0);
    Point left = new Point(0, 0, 0);
    Point right = new Point(0, 0, 0);
    double p;
    int cell_x = 0, cell_y = 0;
    Graphics g;
    Point point, M, N;
    int delta_x, delta_y;
    BufferedImage image_1, image_2;
    Spline spline;
    int[] rgb;
    int width;
    int height;
    double spline_V_min, spline_V_max;
    double spline_H_min, spline_H_max;
    ArrayList<Spline> splineListH = new ArrayList<Spline>();
    ArrayList<Spline> splineListV = new ArrayList<Spline>();
    PixelUtil pixelUtil_image_1, pixelUtil_image_2;

    int top_distance_dest=0, left_distance_dest=0,bottom_distance_dest = 0;
    int top_percent_dest, left_percent_dest;
    int top_distance_source, left_distance_source;

    Point[][] pointMatrix;
    Cell[][] cellMatrix;
    double dist, proc_distance, proc;
    double x, y, x_ret, y_ret, f;

    double counter = 0;

    
    
    int skypIndex=0;
    Random rand = new Random(); 

    public CInterpolator() {}

    public void generateAnchorANDSplines() {
        pointMatrix = new Point[grid_cell_number][grid_cell_number];
        cellMatrix = new Cell[grid_cell_number][grid_cell_number];  
        splineAndAnchors = true;
        delta_x = 0;
        delta_y = 0;
        for (int i = 0; i < grid_cell_number; i++) {
            delta_y = 0;
            for (int j = 0; j < grid_cell_number; j++) {
                if(i == 0 && j == 0) {
                     point = new Point(grid_start_x + delta_x, (grid_start_y + delta_y),rand.nextInt(255));
                } else {
                         if(i == 1 && j == 1) {
                           point = new Point(grid_start_x + delta_x, (grid_start_y + delta_y),rand.nextInt(255));
                        } else {
                            point = new Point(grid_start_x + delta_x, (grid_start_y + delta_y),rand.nextInt(255));
                        }
                }               
                pointMatrix[j][i] = point;
                delta_y += grid_cell_width_y;
            }
            delta_x += grid_cell_width_x;
        }
        
        point = null;
        for (int i = 0; i < grid_cell_number; i++) {
            spline = new Spline();
            for (int j = 0; j < grid_cell_number; j++) {
                spline.points.add(pointMatrix[i][j]);
            }
            splineListH.add(spline);
        }
        for (int j = 0; j < grid_cell_number; j++) {
            spline = new Spline();
            for (int i = 0; i < grid_cell_number; i++) {
                spline.points.add(pointMatrix[i][j]);
            }
            splineListV.add(spline);
        }
        for (int i = 0; i < grid_cell_number  -1 ; i++) {
            for (int j = 0; j < grid_cell_number - 1; j++) {
               cellMatrix[i][j]   = new Cell();
               cellMatrix[i][j].A = pointMatrix[i][j];
               cellMatrix[i][j].B = pointMatrix[i][j+1];
               cellMatrix[i][j].C = pointMatrix[i+1][j+1];
               cellMatrix[i][j].D = pointMatrix[i+1][j];
            }        
        }             
    }
    public double getXY_Z_coordonate(Cell cel, Point O) {
        double Z, Z0, Z1;
        Point temp_0, temp_1;
        if (cel.A.y < cel.D.y) {
            Z1 = get_ZY_Cosine_Values(cel.A, cel.D, (int) O.y);
        } else {
            Z1 = get_ZY_Cosine_Values(cel.D, cel.A, (int) O.y);
        }
        if (cel.B.y < cel.C.y) {
            Z0 = get_ZY_Cosine_Values(cel.B, cel.C, (int) O.y);
        } else {
            Z0 = get_ZY_Cosine_Values(cel.C, cel.B, (int) O.y);
        }
        temp_0 = new Point(cel.D.x, O.y, Z1);
        temp_1 = new Point(cel.C.x, O.y, Z0);
        if (temp_0.x < temp_1.x) {
            Z = get_ZX_Cosine_Values(temp_0, temp_1, (int) O.x);
        } else {
            Z = get_ZX_Cosine_Values(temp_1, temp_0, (int) O.x);
        }
        return Z;
    }

    
//________________________________________________________________________________________________________________//    
            public double get_ZX_Cosine_Values(Point A, Point B, int x_pos) {  
                dist = x_pos - A.x;
                proc_distance = B.x - A.x;
                proc = (dist * 100) / proc_distance;
                p = proc / 100;
                return Math.round(cosineInterpolate(A.z,B.z,p));
            } 
            public double get_ZY_Cosine_Values(Point A, Point B, int y_pos) {  
                dist = y_pos - A.y;
                proc_distance = B.y - A.y;
                proc = (dist * 100) / proc_distance;
                p = proc / 100;
                return Math.round(cosineInterpolate(A.z,B.z,p));
            }             
            public double get_Y_Cosine_Values(Point A, Point B, int x_pos) {  
                dist = x_pos - A.x;
                proc_distance = B.x - A.x;
                proc = (dist * 100) / proc_distance;
                p = proc / 100;
                return Math.round(cosineInterpolate(A.y,B.y,p));
            }    
            public double get_X_Cosine_Values(Point A, Point B, int y_pos) {        
                dist = y_pos - A.y;
                proc_distance = B.y - A.y;
                proc = (dist * 100) / proc_distance;
                p = proc / 100;
                return Math.round(cosineInterpolate(A.x,B.x,p));
            }
            double cosineInterpolate(double k0, double k1, double t) {
                double f;
                f = (1 - Math.cos(t * Math.PI)) / 2;
                return (k0 * (1 - f) + k1 * f);
            } 
//________________________________________________________________________________________________________________//    
}

class Spline {
    double dist, proc_distance, proc;
    double x, y, p,x_ret, y_ret, f;    
    int leftPoint = 1000;
    int rightPoint = 0;
    int upPoint = 1000;
    int bottomPoint = 0;
    ArrayList<Point> points = new ArrayList<Point>();
    public Spline() {}
    public void getCardinalPoints() {
        for (Point p : points) {
            if (p.x > rightPoint) {
                rightPoint = (int) p.x;
            }
            if (p.x < leftPoint) {
                leftPoint = (int) p.x;
            }
            if (p.y > bottomPoint) {
                bottomPoint = (int) p.y;
            }
            if (p.y < upPoint) {
                upPoint = (int) p.y;
            }
        }
    }
    public double getXSplineCoord(int y) {
        for (int i = 1; i < points.size(); i++) {
            if (y < points.get(i).y) {
                x_ret = get_X_Cosine_Values(points.get(i - 1), points.get(i), y);
                break;
            }
        }
        return x_ret;
    }

    public double getYSplineCoord(int x) {
        y_ret = 0;
        for (int i = 1; i < points.size(); i++) {
            if (x < points.get(i).x) {
                y_ret = get_Y_Cosine_Values(points.get(i - 1), points.get(i), x);
                break;
            }
        }
        return y_ret;
    }

    public double get_X_Cosine_Values(Point A, Point B, int y_pos) {
        dist = y_pos - A.y;
        proc_distance = B.y - A.y;
        proc = (dist * 100) / proc_distance;
        p = proc / 100;
        f = (1 - Math.cos(p * Math.PI)) / 2;
        x = (A.x * (1 - f) + B.x * f);
        return Math.round(x);
    }

    public double get_Y_Cosine_Values(Point A, Point B, int x_pos) {
        dist = x_pos - A.x;
        proc_distance = B.x - A.x;
        proc = (dist * 100) / proc_distance;
        p = proc / 100;
        f = (1 - Math.cos(p * Math.PI)) / 2;
        y = (A.y * (1 - f) + B.y * f);
        return Math.round(y);
    }    
}
class Cell{
  Point A;
  Point B;
  Point C;
  Point D;  
  public Cell(){}
  public Cell(Point A , Point B , Point C , Point D){
      this.A = A;
      this.B = B;
      this.C = C;
      this.D = D;
  }        
}
class Point {
    double x;
    double y;
    double z;
    public Point(double x, double y, double z) {
        this.x = x;
        this.y = y;
        this.z = z;
    }
}

class PixelUtil {

    BufferedImage image;
    boolean alphaRaster = false;
    int width, height;
    int[] rgb = new int[4];
    byte[] image_byte_array;

    public PixelUtil(BufferedImage image) {
        refresh_byte_array(image);
        this.image = image;
        if (image.getAlphaRaster() != null) {
            alphaRaster = true;
        }
        width = image.getWidth();
        height = image.getHeight();
    }

    public void refresh_byte_array(BufferedImage image) {
        this.image = image;
        image_byte_array = null;
        image_byte_array = ((DataBufferByte) image.getRaster().getDataBuffer()).getData();
    }
    public int[] getPixelColor(int i, int j) {
        rgb[0] = 255;
        rgb[1] = image_byte_array[(j * width * 3) + (i * 3) + 2] & 0xFF;
        rgb[2] = image_byte_array[(j * width * 3) + (i * 3) + 1] & 0xFF;
        rgb[3] = image_byte_array[(j * width * 3) + (i * 3)] & 0xFF;
        return rgb;
    }
    public int[] getPixelColor_alpha(int i, int j) {
        rgb[0] = image_byte_array[(j * width * 4) + (i * 4)] & 0xFF;
        rgb[1] = image_byte_array[(j * width * 4) + (i * 4) + 3] & 0xFF;
        rgb[2] = image_byte_array[(j * width * 4) + (i * 4) + 2] & 0xFF;
        rgb[3] = image_byte_array[(j * width * 4) + (i * 4) + 1] & 0xFF;
        return rgb;
    }

    public void setPixelColor(int i, int j, int alpha, int red, int green, int blue) {
        if (blue <= 127) {
            image_byte_array[(j * width * 3) + (i * 3)] = (byte) blue;
        } else {
            image_byte_array[(j * width * 3) + (i * 3)] = (byte) (blue - 256);
        }
        if (green <= 127) {
            image_byte_array[(j * width * 3) + (i * 3) + 1] = (byte) green;
        } else {
            image_byte_array[(j * width * 3) + (i * 3) + 1] = (byte) (green - 256);
        }
        if (red <= 127) {
            image_byte_array[(j * width * 3) + (i * 3) + 2] = (byte) red;
        } else {
            image_byte_array[(j * width * 3) + (i * 3) + 2] = (byte) (red - 256);
        }
    }
    public void setPixelColor_alpha(int i, int j, int alpha, int red, int green, int blue) {
        if (alpha <= 127) {
            image_byte_array[(j * width * 4) + (i * 4)] = (byte) alpha;
        } else {
            image_byte_array[(j * width * 4) + (i * 4)] = (byte) (alpha - 256);
        }
        if (blue <= 127) {
            image_byte_array[(j * width * 4) + (i * 4) + 1] = (byte) blue;
        } else {
            image_byte_array[(j * width * 4) + (i * 4) + 1] = (byte) (blue - 256);
        }
        if (green <= 127) {
            image_byte_array[(j * width * 4) + (i * 4) + 2] = (byte) green;
        } else {
            image_byte_array[(j * width * 4) + (i * 4) + 2] = (byte) (green - 256);
        }
        if (red <= 127) {
            image_byte_array[(j * width * 4) + (i * 4) + 3] = (byte) red;
        } else {
            image_byte_array[(j * width * 4) + (i * 4) + 3] = (byte) (red - 256);
        }
    }
}



